#!/usr/bin/env python
import pygame
import obd
from obd import Unit
from platform import machine
from enum import Enum
import time
from random import randint
from datetime import datetime


class CommandObj:
    def __init__(self, command, rect, font, text_color, title_percent=1, alias=None):
        self.command = command
        # Format obd command name to lower case 10 char
        self.rect = rect
        self.font = font
        self.pad = 10
        self.alias = alias if alias is not None else self.command.name.lower().replace('_', ' ').strip()
        self.title = font.render(self.alias, True, text_color)
        self.title_mask = pygame.Surface((self.rect.width * title_percent - self.pad,
                                          self.title.get_height()), pygame.SRCALPHA)
        self.data = ""
        self.transparent_blit(self.title_mask, self.title, (0, 0))

    def transparent_blit(self, dest_surface, src_surface, area):
        dest_surface.fill((255, 255, 255, 0))
        dest_surface.blit(src_surface, area)

    # data callback, obd async will update text when new data is available
    def update_data(self, value):
        # Format pint values to be more consice
        value = value.value if value is not None else ""
        if value.u == Unit.percent:
            self.data = "{:.2f}%".format(value.m)
        elif value.u == Unit.celsius:
            self.data = "{:d}c".format(value.m)
        elif value.u == Unit.second:
            self.data = "{:.2f}s".format(value.m)
        elif value.u == Unit.volt:
            self.data = "{:.2f}v".format(value.m)
        else:
            self.data = "{}".format(value)

    def draw(self, surface):
        title_rect = pygame.Rect(self.pad, 0,
                                 self.title_mask.get_width(), self.title_mask.get_height())
        surface.blit(self.title_mask, title_rect)

        if DEBUG >= 2:
            pygame.draw.rect(surface, (255, 0, 0), title_rect, 1)


# Button primative, displays OBD endpoint data
# param {obd.OBDCommand} command
# param {pygame.Rect} rect
class Button(CommandObj):
    def __init__(self, command, rect, font, text_color, title_percent, alias=None):
        super().__init__(command, rect, font, text_color, title_percent, alias)
        self.text_color = text_color
        self.text = self.font.render("", True, text_color)
        self.text_mask = pygame.Surface((self.rect.width * (1 - title_percent) - self.pad,
                                        self.text.get_height()), pygame.SRCALPHA)
        self.transparent_blit(self.text_mask, self.text, (self.text_mask.get_width() - self.text.get_width(), 0))
        self.highlighted = False

    def update_data(self, value):
        super().update_data(value)
        self.text = self.font.render(self.data, True, self.text_color)
        self.transparent_blit(self.text_mask, self.text, (self.text_mask.get_width() - self.text.get_width(), 0))

    # Draw formatted rectangle with text to display title: value
    def draw(self, surface, highlighted=False):
        rect_color = highlight_color if highlighted else bg_color
        pygame.draw.rect(surface, rect_color, self.rect)

        title_rect = pygame.Rect(self.pad, self.rect.height / 2 - self.title.get_height() / 2,
                                 self.title_mask.get_width(), self.title_mask.get_height())
        text_rect = pygame.Rect(self.rect.width - self.text_mask.get_width() - self.pad,
                                self.rect.height / 2 - self.title.get_height() / 2,
                                self.text_mask.get_width(), self.text_mask.get_height())
        surface.blit(self.title_mask, title_rect)
        surface.blit(self.text_mask, text_rect)
        if DEBUG >= 2 and highlighted:
            pygame.draw.rect(surface, (255, 0, 0), self.rect, 1)
        if DEBUG >= 2:
            pygame.draw.rect(surface, (255, 0, 0), title_rect, 1)
        if DEBUG >= 3:
            pygame.draw.rect(surface, (255, 0, 0), text_rect, 1)


class Graph(CommandObj):
    def __init__(self, command, font, text_color, max_points=100, title_percent=1, alias=None):
        super().__init__(command, SCREENRECT, pygame.font.SysFont(font, 18), text_color, title_percent, alias)
        self.points = [1]
        self.times = [datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]]
        self.historic_points = []
        self.coords = []
        self.max_points = max_points
        self.base_graph = pygame.Surface((self.rect.width,
                                          self.rect.height - self.title_mask.get_height() - self.pad))
        self.graph_rect = self.base_graph.get_rect()
        self.recording = False
        self.obd_connect()

    def save_csv(self):
        if len(self.historic_points) > 1:
            with open("{}-{}.csv".format(self.alias, self.historic_points[0][1]).replace(' ', '_'), 'w+') as file:
                file.write("time,{}\n".format(self.alias))
                for p in self.historic_points:
                    file.write("{},{}\n".format(p[1], p[0]))
            self.historic_points = []

    def obd_connect(self):
        if len(obd.scan_serial()) > 0:
            self.conn = obd.Async()
            self.conn.watch(self.command, callback=self.update_data)
            self.conn.start()
        else:
            print("No serial ports available")

    def obd_disconnect(self):
        self.conn.stop()

    def update_data(self, value):
        super().update_data(value)
        self.points.append(value.value.m)
        self.times.append(datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3])

        if len(self.points) > self.max_points:
            if self.recording:
                self.historic_points.append((self.points.pop(0), self.times.pop(0)))
            else:
                self.points.pop(0)
                self.times.pop(0)

        self.coords = [(self.graph_rect.width / len(self.points) * i,
                        self.graph_rect.height - (self.graph_rect.height / max(self.points) * self.points[i]))
                       for i in range(len(self.points))]

        self.title = self.font.render("{}: {:.2f}, {:.2f}, {:.0f}".format(
                                      self.alias, min(self.points), max(self.points),
                                      sum(self.points) / len(self.points)), True, fg_color)
        self.title_mask = pygame.Surface((self.rect.width * 1 - self.pad, self.title.get_height()), pygame.SRCALPHA)
        self.transparent_blit(self.title_mask, self.title, (0, 0))

    def draw(self, surface):
        super().draw(surface)

        rect = pygame.Rect(0, self.pad + self.title_mask.get_height(),
                           self.graph_rect.width, self.graph_rect.height)
        self.base_graph.fill(highlight_color)
        if len(self.coords) >= 2:
            pygame.draw.polygon(self.base_graph, fg_color,
                                (*self.coords, self.graph_rect.bottomright, self.graph_rect.bottomleft))

        surface.blit(self.base_graph, rect)

        if self.recording and datetime.now().second % 2 == 0:
            pygame.draw.circle(surface, (255, 0, 0), (self.rect.width - self.pad * 2, self.rect.y + self.pad), self.pad)

        if DEBUG >= 2:
            pygame.draw.rect(surface, (255, 0, 0), rect, 1)


# Implements interface for traversing list of buttons
# param {list<obd.OBDCommand>} obd_commands
# param {int} on_screen
# param {string} sys_font
class Menu:
    def __init__(self, obd_commands, on_screen, sys_font):
        self.on_screen = on_screen
        # Points at cursor position on screen
        self.cursor_ptr = 0
        # Points at position in button list
        self.buttons_ptr = 0
        # Scaled pad and rect based on buttons on screen
        self.pad = HEIGHT / self.on_screen * 0.1
        self.button_rect = pygame.Rect(0, 0,
                                       WIDTH,
                                       HEIGHT / self.on_screen)
        self.font = pygame.font.SysFont(sys_font, int(self.button_rect.height / HEIGHT * 100))

        self.buttons = []
        for b in obd_commands:
            if isinstance(b, tuple):
                self.buttons.append(Button(b[0], self.button_rect, self.font, fg_color, .6, alias=b[1]))
            else:
                self.buttons.append(Button(b, self.button_rect, self.font, fg_color, .6))

        self.visible_buttons = self.buttons[self.cursor_ptr:self.cursor_ptr + self.on_screen]
        self.conn = None
        self.obd_connect()

    def obd_connect(self):
        if len(obd.scan_serial()) > 0:
            self.conn = obd.Async()
            for b in self.buttons:
                self.conn.watch(b.command, callback=b.update_data)
            self.conn.start()
        else:
            print("No serial ports available")

    def obd_disconnect(self):
        self.conn.stop()

    # Move cursor down one item
    def cursor_down(self):
        # cursor is on last visible item
        if self.cursor_ptr == self.on_screen - 1:
            self._push_down()
        # increment cursor, clamped to self.on_screen
        self.cursor_ptr = min(self.on_screen - 1, self.cursor_ptr + 1)

    # Move cursor up one item
    def cursor_up(self):
        # cursor is on first visible item
        if self.cursor_ptr == 0:
            self._push_up()
        # decrement cursor, clamped to 0
        self.cursor_ptr = max(0, self.cursor_ptr - 1)

    # Manage visible buttons on cursor_down
    def _push_down(self):
        # If the list pointer is not on last item in list, increment pointer
        if self.buttons_ptr < len(self.buttons) - self.on_screen:
            self.buttons_ptr += 1
        # if the list pointer is on the last item in list, wrap around to first item
        elif self.buttons_ptr == len(self.buttons) - self.on_screen:
            self.buttons_ptr = 0
            self.cursor_ptr = -1
        # update visible buttons by extracting a subset from the main button list
        self.visible_buttons = self.buttons[self.buttons_ptr: self.buttons_ptr + self.on_screen]

    # Manage visible buttons on cursor_up
    def _push_up(self):
        # If the list pointer is not on first item in list, decrement pointer
        if self.buttons_ptr > 0:
            self.buttons_ptr -= 1
        # if the list pointer is on the first item in list, wrap around to last item
        elif self.buttons_ptr == 0:
            self.buttons_ptr = len(self.buttons) - self.on_screen
            self.cursor_ptr = self.on_screen
        # update visible buttons by extracting a subset from the main button list
        self.visible_buttons = self.buttons[self.buttons_ptr: self.buttons_ptr + self.on_screen]

    # Draw each button, highlighting if it is under our cursor.
    def draw(self, display):
        for i in range(len(self.visible_buttons)):
            surface = pygame.Surface((self.button_rect.width, self.button_rect.height))
            if i != self.cursor_ptr:
                self.visible_buttons[i].draw(surface)
            else:
                self.visible_buttons[i].draw(surface, True)
            display.blit(surface, (0, i * self.button_rect.height))


class GameState(Enum):
    MENU = 0
    GRAPH = 1


# --- Pygame Setup
# if ARM, Assume we are on real hardware (raspi)
# Setup SDL vars to write direct to framebuff
if machine() == 'armv6l':
    import os
    os.putenv('SDL_VIDEODRIVER', 'fbcon')
    os.putenv('SDL_FBDEV', '/dev/fb1')
pygame.init()
pygame.display.init()
screen = pygame.display.set_mode([320, 240])
pygame.mouse.set_visible(False)

# --- Constants
WIDTH = pygame.display.Info().current_w
HEIGHT = pygame.display.Info().current_h
SCREENRECT = pygame.Rect(0, 0, WIDTH, HEIGHT)
DEBUG = 1
# --- Colors
bg_color = (0, 0, 0)
fg_color = (0, 230, 10)
highlight_color = (0, 30, 2)

# --- Objects
menu = Menu((obd.commands.SPEED,
             obd.commands.RUN_TIME,
             (obd.commands.COOLANT_TEMP, "coolant"),
             obd.commands.FUEL_LEVEL,
             (obd.commands.AMBIANT_AIR_TEMP, "Air")),
            3, 'Ubuntu')

# Simulate some test data
if DEBUG >= 2:
    menu.buttons[0].update_data(10 / 3 * Unit.percent)
    menu.buttons[1].update_data(Unit.Quantity(67, Unit.celsius))
    menu.buttons[2].update_data(3.3, Unit.volt)
    menu.buttons[3].update_data(800 / 34 * Unit.percent)
    menu.buttons[4].update_data(1200 / 154 * Unit.percent)
    menu.buttons[5].update_data(Unit.Quantity(21000000, Unit.celsius))


# graph = Graph(obd.commands.SPEED, 'Ubuntu', fg_color)
graph = None
wait_sec = randint(1, 100)
counter = 0
value = randint(0, 100)
# --- Misc
state = GameState.MENU
clock = pygame.time.Clock()
done = False
while not done:
    screen.fill(bg_color)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            done = True
        if event.type == pygame.KEYDOWN:
            if state == GameState.MENU:
                if event.key == pygame.K_UP:
                    menu.cursor_up()
                elif event.key == pygame.K_DOWN:
                    menu.cursor_down()
                elif event.key == pygame.K_c:
                    menu.obd_connect()
                elif event.key == pygame.K_z:
                    menu.obd_disconnect()
                    graph = Graph(menu.visible_buttons[menu.cursor_ptr].command, 'Ubuntu', fg_color)
                    state = GameState.GRAPH
            elif state == GameState.GRAPH:
                if event.key == pygame.K_x:
                    graph.obd_disconnect()
                    state = GameState.MENU
                    menu.obd_connect()
                elif event.key == pygame.K_c:
                    if graph.recording:
                        graph.recording = False
                        graph.save_csv()
                    elif not graph.recording:
                        graph.recording = True

            if DEBUG > 0:
                if event.key == pygame.K_ESCAPE:
                    DEBUG = max(1, DEBUG - 1)
                    print("Debug Level: {}".format(DEBUG))
                elif event.key == pygame.K_LCTRL:
                    DEBUG = min(10, DEBUG + 1)
                    print("Debug Level: {}".format(DEBUG))
                elif event.key == pygame.K_0:
                    print(graph.points)

    if state == GameState.MENU:
        if DEBUG >= 2:
            if counter < wait_sec:
                menu.buttons[1].update_data(Unit.Quantity(value, Unit.celsius))
                counter += 1
            elif counter >= wait_sec:
                counter = 0
                wait_sec = randint(1, 100)
                value = randint(0, 100)
        menu.draw(screen)
    elif state == GameState.GRAPH:
        if DEBUG >= 2:
            if counter < wait_sec:
                graph.update_data(Unit.Quantity(value, Unit.celsius))
                counter += 1
            elif counter >= wait_sec:
                counter = 0
                wait_sec = randint(1, 100)
                value = randint(0, 100)
        graph.draw(screen)
    # --- --- End Object Draws
    pygame.display.flip()
    # --- End Draw Logic
    clock.tick(60)

pygame.quit()
